#!/bin/sh

#
# If we have only one argument that means that nothing was passed
# add a 'remote:$(guess-remote)' to our arguments to be parsed later
#
if [ $# -lt 1 ]; then
    set -- remote:$(guess-remote)
fi

#
# Assign remote outside of the scope of the control flow, otherwise
# they will be lost, this is not POSIX
#
remote=""

#
# Check if the first argument we are given starts with remote: this
# mean the user is telling us which remote we should push to, in this
# case strip the 'remote:' and store the rest in the 'remote' variable
#
# We also check if we have less than 3 arguments, that means we were
# not given a branch to push to, so default to the branch name itself
#
if printf -- "%s" "$1" | grep -q '^remote:'; then
    remote="$(printf -- "%s" "$1" | sed 's|^remote:||g')"
    [ $# -lt 1 ] && set -- "$@" $(git rev-parse --abbrev-ref HEAD)
else
#
# If the first argument does not start with 'remote:' that means we were
# given a branch to push to and no remote was given to us, use 'guess-remote'
# to get us a nice remote for us to use and add it to the middle of the
# args array, we need to it to the args array because we rely on having
# at least 3 objects inside it, the 0th is the name of the script, the
# 1st is the 'remote:' we should push to and the 2nd to the last are all
# the branches we should push to
#
    remote="$(guess-remote)"
    set -- remote:$remote "$@"
fi

#
# arguments holds all commandline flags to be passed to git, like the
# '--force' which is activated when we have FORCE_PUSH in the environment
#
arguments=""
[ "$FORCE_PUSH" ] && arguments="$arguments --force"

#
# This hold all the pushes we will do, a push is defined as:
# local_branch:remote_branch
# they can be the same (like master:master) or different ones
# (like 3.11-dns:3.11-stable)
#
pushes=""

#
# Iterate over the third object forward, this for-loop will
# populate all the objects in the pushes array
#
args="$@"
shift
for arg; do
	#
	# If the object given to us contain a colon : that means
	# the user passed to us a complete object instead of just
	# a branch name. we also continue to the next object of the
	# loop as there is no need to run the rest of the code
	#
    if printf -- "%s" "$arg" | grep -q -F ':'; then
        pushes="$pushes $arg"
		continue
	fi

	#
	# Follow the tracking branch, if the use has branch 'foo' that tracks
	# upstream/bar then we will end pushing to 'bar'
	#
	remote_branch="$(tracking-branch)"

	#
	# Finally append it to pushes so we push it later
	#
	pushes="$pushes $arg:$remote_branch"
done

# TODO: create binary called 'normalize' that does this on-demand
pushes="$(normalize "$pushes")"

#
# This strips all whitespaces, otherwise the following assignment of the
# 'pushurl' variable will fail terribly and silently
#
remote="$(normalize "$remote")"

#
# Try getting from the pushurl of the git remote, this can be set by the user
# to have a URL to push and another for fetching, if 'pushurl' fails then we
# fallback on the url which should always be set
#
pushurl="$(git config --local remote.$remote.pushurl || git config --local remote.$remote.url)"

#
# If pushurl returned empty then we will be unable to push, error out to the user
#
if [ -z "$pushurl" ]; then
    printerr $0: No URL can be used to push from remote "'$remote'"
	exit 1
fi

#
# if PUSHP_DRY_RUN is set then just show to the user the information we gathered
# and exit, this is good for people that are afraid they might do a wrong push
#
if [ "$PUSHP_DRY_RUN" ]; then
	echo Args: "$args"
	echo Arguments: "$arguments"
	echo Remote: "$remote"
	echo Pushes: "$pushes"
	echo PushURL: "$pushurl"
	echo FinalCommand: git push --atomic --quiet "$arguments" "$remote" "$pushes"
	exit 0
fi

#
# This is the most important part, this is where we actually do the operation we
# were meant to do, we will push it in --atomic, so either ALL of the pushes will
# work or none of them will
#
# We start with the 'arguments' array and then pass the remote and finally we pass
# all the push operations we want to be done
#
if git push --atomic --quiet $arguments $remote $pushes >/dev/null; then
	printok "Pushed '$pushes' to '$pushurl'"
else
	printerr "Failed push of '$pushes' to '$pushurl'"
	exit 1
fi
