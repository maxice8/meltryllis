#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
# mgbr BRANCH-NAME ... - mgbr merge branches
[ $# -lt 1 ] && set -- $(git current-branch)

for branch in "$@"; do
	if ! git show-ref --quiet refs/heads/"$branch"; then
		printerr "Branch '$branch' doesn't exist"
		exit 1
	fi
done

if ! git diff --quiet; then
	printerr "Tree is dirty, can't continue"
	exit 1
fi

merge_branch() {
	# For when you need to leave before pushing
	earlyleave=0

	# Assume that the first branch given to us has the
	# prefix that we are pushing to on alpine, if we are
	# not pushing to alpine then this just noop to the master
	# branch, if it is  alpine we add -stable to the version
	# prefix
	prefix="$(alpine-stable-prefix "$1" || echo master)"
	[ "$prefix" = master ] || prefix="$prefix"-stable

	gbr "$prefix" || return 1

	# Merge all the changes we have done
	git merge --quiet "$@" --no-edit --ff && {
		printok "Merged '$*' into '$prefix'"
	} || {
		printerr "Dropping to shell, please fix or exit 1"
		${SHELL:-sh} -l || {
			earlyleave=1
		}
	}

	# Pull changes from where we are going to push
	PRINTOK_QUIET=yes pullp || {
		printerr "Dropping to shell, please fix or exit 1"
		${SHELL:-sh} -l || {
			earlyleave=1
		}
	}

	if [ "$earlyleave" -eq 1 ]; then
		printerr "Failed to merge '$*' into '$prefix', resetting '$prefix'"
		git reset --hard "$prefix"
		return 1
	fi

	pushes="$pushes $prefix:$prefix"
}

pushes=""
branches="$*"

# Parse every branch given to us and separate them if they are meant for
# different branches of alpine, like 3.10-stable.
for branch in "$@"; do
	case "$(alpine-stable-prefix "$branch")" in
		'')
			EDGE="$EDGE $branch"
			shift
			;;
		3.11)
			stable310="${stable310} $branch"
			shift
			;;
		3.10)
			stable310="${stable310} $branch"
			shift
			;;
		3.9)
			stable39="${stable39} $branch"
			shift
			;;
		3.8)
			stable38="${stable38} $branch"
			shift
			;;
		3.7)
			stable37="${stable37} $branch"
			shift
			;;
	esac
done

[ -n "$EDGE" ] && merge_branch $EDGE
[ -n "${stable311}" ] && merge_branch ${stable311}
[ -n "${stable310}" ] && merge_branch ${stable310}
[ -n "${stable39}" ] && merge_branch ${stable39}
[ -n "${stable38}" ] && merge_branch ${stable38}
[ -n "${stable37}" ] && merge_branch ${stable37}

# Push our local changes to the upstream repo, we don't
# provide any info to pushp because it can detect whether
# we are using 'gitstream' as our remote, and in the future
# we will use 'upstream' as the remote.
if pushp $pushes; then
	dlbr $branches
else
	printerr "Failed to make the following pushes: $pushes"
	exit 1
fi

exit 0
