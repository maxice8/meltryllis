#!/bin/sh
set -u
export LC_ALL=C

[ "${NO_FORMALIZE:-}" ] && exit 0

# :param ::field field to be checked
# :param ::replaced string to be replaced
# :param ::replace string to replace
#
# Checks if ::replaced is present in ::field with 'grep' then replaces it
# with ::replace
replace_field() {
	grep -qi -- "^$1=.*$2" "$TEMPLATE_FILE" &&
		sed -ri "s|(^$1=.*)$2(.*)|\\1$3\\2|I" "$TEMPLATE_FILE"
}

# :param ::oldfield field to be rewritten
# :param ::newfield name to replace the field with
#
# checks if ::oldfield is present and rewrites it with ::newfield
rewrite_field() {
	grep -qi -- "$1=" "$TEMPLATE_FILE" &&
		sed -i "s|$1=|$2=|g" "$TEMPLATE_FILE"
}

# TODO: rewrite this in the style of the others.
# Replaces any amount of license strings with one string
#
# 1st arg -- string to replace
# any other arg -- string to be replaced
#
# Process
# 1. grab license line with grep
# 2. grab everything between double-quotes
# 3. transform every comma into a newline (comma is separator for licenses)
# 4. remove spaces
# 5. parse over args and replace license with proper license with sed
# 6. rebuild the string with awk and sed, trasnform every newline into command
# and a space, then replace the last space comma with a newline
# 7. replace the license field using sed
replace_license() {
	licenses="$(grep -Po -m 1 -- '^license=[\"'\""]{0,1}\\K.*[^"'""]' "$TEMPLATE_FILE" |
				sed 's|, |\\n|g')"

	c=0

	final="$1" ; shift

	while [ $# -gt 0 ]; do
		lc="$1" ; shift
		echo "$licenses" | grep -qi -- "^$lc$" || continue
		licenses="$(echo "$licenses" | sed "s|^$lc$|$final|I")"
		c=1
	done
	[ $c -eq 0 ] && return
	licenses="$(echo "$licenses" | paste -s -d ',' | sed 's|,|, |g')"

	sed -i "s|^license=.*|license=\"$licenses\"|" "$TEMPLATE_FILE"
}

# uses 'grep' to get name of the package from pkgname= field, checks if the correct
# header is present and if not rewrites it
rewrite_header() {
	pkgname="$(_get_varcontent pkgname= | tr -d \")"
	grep -Fq -- "^# Template file for '$pkgname'$" "$TEMPLATE_FILE" ||
		sed -i "1 s|^.*$|# Template file for '$pkgname'|" "$TEMPLATE_FILE"
}

# :param ::field field to be unquoted
# remove double-quotes after ::field and in the end of the line
# this will fail for multiline fields
unquote_field() {
	 sed -ri "s|($1)\"(.*)\"|\\1\\2|" "$TEMPLATE_FILE"
}

# :param ::field field to be quoted
# put double-quotes after ::field and in the end of the line
# this will fail for multiline fields
quote_field() {
	sed -ri "s|($1)(.*)|\\1\"\\2\"|" "$TEMPLATE_FILE"
}

# rewrites all '[ -n' occourences with '[ '
rewrite_tests() {
	grep -Fq -- '[ -n' "$TEMPLATE_FILE" &&
		sed -i "s|\\[ -n|\\[|g" "$TEMPLATE_FILE"
}

# returns a newline delimitated list of posix sh variable names
# that are on the start of the line, it includes the '=' sign
_get_fields() {
	grep -Po -- '^[A-Za-z][^ ].*?[^ ]=' "$TEMPLATE_FILE"
}

# :param ::field field to get the content from
# grab all content that appears after ::field including equal sign
# and double-quotes, if equal sign is not desired pass the argument
# as ::field=, if from double-quotes it will include them. will fail 
# on multiline variables
_get_varcontent() {
	grep -Po -- "^$1\\K(\")?.*" "$TEMPLATE_FILE"
}

# quotes fields that have variable expansion happening
quote_varfields() {
	for field in $(_get_fields); do
		# Check if the field contain sigil ($), denoting a variable
		# if it isn't found we skip since it doesn't matter to us
		_get_varcontent "$field" | grep -Fq -- '$' || continue
		_get_varcontent "$field" | grep -Fq -- '"' && continue

		quote_field "$field"
	done
}

# Unquote variables that should be quoted, it tries to detect if the variable
# has stuff that should be detected like variable expansion and spaces, it
# also has a list of variables that should always be quoted regardless
unquote_varfields() {
	# Strip fields that are meant to be quoted, but may not have identifiers
	# that we used to discard, like having spaces, expanding variables
	fields="$(_get_fields |
		grep -Ev 'depends|homepage|license|distfiles|replaces|provides|conflicts|reverts|pycompile|configure_script|args|build_options|alternatives|FLAGS|conf_files|triggers|only_for_archs|changelog|font_dirs|_homedir|_groups|_accounts|_shell|_files|lib32files|lib32symlinks|shlib_requires|subpackages|nocross|skip_extraction|make_dirs|build_helper|go_build_tags|archs')"

	for field in $fields; do
		# Check if the field contain sigil ($), denoting variable expansion
		# also check for spaces, if any of those are found we skip since variable
		# expansion and spaces must always be quoted
		_get_varcontent "$field" | grep -Eq -- '\$|[[:space:]]' && continue
		_get_varcontent "$field" | grep -Fq -- '"' || continue

		unquote_field "$field"
	done
}

# put braces '{}' around variable expansions that has other text in it
#
# :example 
# distfiles="$homepage/$pkgname/$pkgname.tar.xz"
# distfiles="${homepage}/${pkgname}/${pkgname}.tar.xz"
bracket_varfields() {
	# XXX: make it not bracket variables separated by space like depends="$makedepends python"
	# Put brackets in variable expansions
	for field in $(_get_fields); do
		_get_varcontent "$field" | grep -q -- '\$[A-Za-z0-9]' || continue

		# shellcheck disable=SC2016
		_braced_var="$(_get_varcontent "$field" | grep -Po -- '\$[^{].+?[^"/]+')"
		_unquoted_var="$(_get_varcontent "$field" | tr -d '"')"
		[ "$_braced_var" = "$_unquoted_var" ] && continue

		endof="$(_get_varcontent "$field" | 
			perl -pe 's|\$|\\n\$|g ;s|\$([^\{])(.*?)(-\|/\|\.\|"\| )|\${\1\2}\3|g')"

		endof="$(echo "$endof" | tr -d '\n')"

		sed -i "s|^${field}.*|${field}${endof}|" "$TEMPLATE_FILE"
	done
}

# remove braces '{}' around variable expansions when variable expansion is the whole
# variable
#
# :example depends="${makedepends}" -> depends="$makedepends"
unbracket_varfields() {
	for field in $(_get_fields); do
		# shellcheck disable=SC2016
		_get_varcontent "$field" | grep -Fq -- '${' || continue
		# match against only the first ending bracket, if there is more than one
		# we can safely ignore it since the if condition wouldn't match
		# shellcheck disable=SC2016
		_braced_var="$(_get_varcontent "$field" | grep -Po -- '\${.*?}')"
		_unquoted_var="$(_get_varcontent "$field" | tr -d '"')"
		if [ "$_braced_var" = "$_unquoted_var" ]; then
			sed -i "s|^${field}.*|${field}$(_get_varcontent "$field" | tr -d '{' | tr -d '}')|g" "$TEMPLATE_FILE"
		fi
	done
}

# replace groups of 4 spaces that are on the start of the line with \t
replace_spaces_with_tabs() {
	grep -q -- '^[[:space:]]\{4\}' "$TEMPLATE_FILE" &&
		sed -i 's|^    |\t|' "$TEMPLATE_FILE"
}

# remove all trailing whitespaces
remove_trailing_whitespace() {
	grep -q -- '[[:blank:]]$' "$TEMPLATE_FILE" &&
		sed -i 's|[[:blank:]]*$||' "$TEMPLATE_FILE"
}

while [ $# -gt 0 ]; do
	pkgs="$(find "$1" -type f -iname template)"
	for pkg in $pkgs; do
		export TEMPLATE_FILE="$pkg"
		rewrite_header &
		rewrite_tests &
		replace_spaces_with_tabs &
		remove_trailing_whitespace &

		replace_field maintainer "Christian Neukirchen <chneukirchen@gmail.com>" \
					  "Leah Neukirchen <leah@vuxu.org>" &
		replace_field maintainer "Toyam Cox <Vaelatern@gmail.com>" \
					  "Toyam Cox <Vaelatern@voidlinux.eu>" &
		replace_field maintainer "Duncan Overbruck <mail@duncano.de>" \
					  "Duncaen <duncaen@voidlinux.eu>" &
		replace_field maintainer "Rasmus Thomsen <rasmus.thomsen@protonmail.com" \
					  "Rasmus Thomsen <oss@cogitri.dev>" &
		replace_field maintainer "Rasmus Thomsen <Rasmus.thomsen@protonmail.com" \
					  "Rasmus Thomsen <oss@cogitri.dev>" &

		replace_field license "Artistic, GPL-1" "Artistic-1.0-Perl, GPL-1.0-or-later" &
		(
		replace_license "BSD-2-Clause" "2-Clause-BSD" "BSD-2"
		replace_license "BSD-3-Clause" "3-Clause-BSD" "BSD-3"
		replace_license "Unlicense" "unlicense" "the unlicense"
		replace_license "GPL-1.0-or-later" "GPL+" "GPL-1+"
		replace_license "GPL-2.0-or-later" "GPL-2+"
		replace_license "LGPL-2.1-or-later" "LGPL-2+"
		replace_license "MPL-2.0" "MPL-2"
		replace_license "Apache-2.0" "Apache 2.0"
		) &

		# replace_field hostmakedepends "pkg-config" "pkgconf" &

		rewrite_field pycompile_modules pycompile_module &

		rewrite_field noarch=yes archs=noarch

		quote_varfields &
		unquote_varfields &
		bracket_varfields &
		unbracket_varfields &
		wait
		unset TEMPLATE_FILE
	done
	shift
done
