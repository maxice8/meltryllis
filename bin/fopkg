#!/bin/sh
#
# Show diff of the contents of a package (files) or the
# changes in providers and dependencies.
#
# Must be called from where the APKBUILD is located
#

NORMAL="\033[1;0m"
RED="\033[1;31m"
GREEN="\033[1;32m"

msg() {
	local _prompt="$GREEN>>>${NORMAL}"
	printf "$_prompt %s\n" "$1"
}

die() {
	local _prompt="${RED}>>> ERROR:${NORMAL}"
	printf "$_prompt %s\n" "$1"
	exit 1
}

pkg="$1"
[ -z "$1" ] && pkg="$(git current-branch)"
pkg="$(find_repo $pkg)"

# shellcheck disable=SC1091
. $pkg/APKBUILD || die "failed to source repo for package"

tmpdir=$(mktemp -d -t checkpkg-script.XXXXXX)
# shellcheck disable=2064
trap "rm -rf '$tmpdir'" INT EXIT
cd "$tmpdir" || die "failed to create temp dir"

# generate a temp repositories file with only the http(s) repos
grep -E "^https?:" /etc/apk/repositories > "$tmpdir"/remote-repositories
grep -E -v "^https?:" /etc/apk/repositories > "$tmpdir"/local-repositories

_carch="$(abuild -A)"

# We need ncurses for this, lets clean up the terminal
reset 

# Fetch all the APKs before doing the operations
for i in $pkgname $subpackages; do
	(
	# Strip the separators and their contents from declaration of subpackages
	# so: foo-doc:doc:noarch becomes foo-doc
	_pkgname="${i%%:*}"

	# shellcheck disable=SC2154
	pkg="${_pkgname}-$pkgver-r$pkgrel"
	pkgfile=${pkg}.apk

	# We need to declare this here so the changes inside the loop change it
	filepath=

	# Try to get our package from our locally built and return early so we don't
	# waste time trying to get a remote package
	for repo in $(cat "$tmpdir"/local-repositories); do
		if [ -f "$repo"/"$_carch"/"$pkgfile" ]; then
			echo "$repo"/"$_carch"/"$pkgfile" > "$tmpdir"/"$_pkgname"
			return 0
		fi
	done

	# We reached here if we don't have a locally built package, so let's try to get
	# the package from our cache and as a last resort fetch it
	oldpkg="$(apk fetch --repositories-file "$tmpdir"/remote-repositories --simulate "$_pkgname" 2>/dev/null | grep Downloading | sed 's/^Downloading //')"

	for candidate in /var/cache/apk/"$oldpkg".*.apk; do
		if ! [ -f "$candidate" ]; then
			continue
		fi
		printok "Found cached $oldpkg"
		echo "$candidate" > "$tmpdir"/"$_pkgname"
		return 0
	done

	# Fetch the package for all runs
	apk fetch \
		--repositories-file "$tmpdir"/remote-repositories \
		--output "$tmpdir" \
		"$_pkgname" \
		>/dev/null 2>&1 &&
	printok "Fetched $oldpkg"
	echo "$PWD"/"$oldpkg".apk > "$tmpdir"/"$_pkgname"
	) &
done
wait

# We need ncurses for this
reset

for i in $pkgname $subpackages; do
	# Strip the separators and their contents from declaration of subpackages
	# so: foo-doc:doc:noarch becomes foo-doc
	_pkgname="${i%%:*}"

	apk="$(cat "$tmpdir"/"$_pkgname")"

	# We get into this block in case we are using remote packages that do not
	# have the remote subpackages that were added on a local APKBUILD we are
	# reading
	if ! [ -f "$apk" ]; then
		continue
	fi

	{
		msg "pkg=$_pkgname"
		tar -z --list --file="$apk" 2>/dev/null \
			| grep -E -v '(^\.SIGN\.|^\.PKGINFO)' \
			| sort ;
	} | less -r
done
