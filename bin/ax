#!/bin/sh
usage() {
	printf "usage: %s <uebtxnsah> [repo/package]\\n" "$(basename "$0")"
}

help() {
usage
	cat <<EOF

u : unpack
e : edit APKBUILD
b : build the package
t : build the package and install
x : get checksum of package
n : navigate directory
s : push to remote git
a : amend commit
m : move package to a given repo
r : rename a package
h : show this message
EOF
}

run() {
	cd "$branch"
	$@
	cd -
}

isclean() {
	git diff --quiet --cached --exit-code
}

find_repo() {

	# Check if the branch name is already a fully working path
	# 
	# This allows us to find_repo if we are given the complete name
	# in the form of <repo>/<package> like main/openrc
	if [ -d "$1" ]; then
		echo -n "$1"
		return 0
	elif [ -d main/"$1" ]; then
		echo -n main/"$1"
		return 0
	elif [ -d community/"$1" ]; then
		echo -n community/"$1"
		return 0
	elif [ -d testing/"$1" ]; then
		echo -n testing/"$1"
		return 0
	elif [ -d unmaintained/"$1" ]; then
		echo -n unmaintained/"$1"
		return 0
	fi

	return 1
}

edit_apkbuild() {
	# Check if the path given to us by $branch results in something
	# This will work in case we are in a branch like 'openrc' or
	# 'main/openrc'
	if [ -f "$branch"/APKBUILD ]; then
		e "$branch"/APKBUILD
		return 0
	# This fallback allows us to edit the APKBUILD if it is in the
	# current directory of a package
	elif [ -f APKBUILD ]; then
		e APKBUILD
		return 0
	fi
	printf "Couldn't find APKBUILD for '%s' to edit\n" "$pkgname"
	return 1
}

move_repo() {
	from="$branch"
	to="$1"

	pkgname="$(echo "$from" | cut -d / -f 2)"
	repo="$(echo "$from" | cut -d / -f 1)"

	# Check if the package doesn't exist and error out
	if [ ! -d "$from" ]; then
		return 1
	fi

	# mv if any of the repos given to us is one of the ones we accept
	# exit otherwise with an error message
	case "$to" in
		main|community|testing|unmaintained) mv -f "$from" "$to" ;;
		*) printf "repo '%s' does not exist\n" "$to" ; return 1 ;;
	esac

	if isclean; then
		git add "$from" "$to"/"$pkgname"
		git commit -m "${to}/${pkgname}: move from $repo"
	fi
}

rename_repo() {
	from="$branch"
	to="$1"

	# Get repo from the branch
	repo="$(echo "$from" | cut -d / -f1)"
	pkgname="$(echo "$from" | cut -d / -f2)"

	# Check if the package doesn't exist and error out
	if [ ! -d "$from" ]; then
		return 1
	fi

	# Check if the package name is already taken in any repo
	# realrepo is set if the name is taken and the function
	# errors out later
	if [ -d main/"$to" ]; then
		realrepo=main
	elif [ -d community/"$to" ]; then
		realrepo=community
	elif [ -d testing/"$to" ]; then
		realrepo=testing
	elif [ -d unmaintained/"$to" ]; then
		realrepo=unmaintained
	fi

	if [ "$realrepo" ]; then
		printf "package '%s' already exists in repo '%s'\n" "$to" "$realrepo"
		return 1
	fi

	mv -f "$from" "$repo"/"$to"

	# Check if there is nothing cached and try to commit it
	if isclean; then
		git add "$from" "$repo"/"$to"
		git commit -m "${repo}/${to}: rename from $pkgname"
	fi
}

mkgit() {
	[ ! -f "$branch"/APKBUILD ] && return 1
	. "$branch"/APKBUILD || {
		printf "Failed to source APKBUILD for %s\n" "$branch" >&2
		return 1
	}

	# declare this variable as it can appear on builddir
	if [ -f APKBUILD ]; then
		srcdir="$(pwd -P)/src"
	else
		srcdir="$(pwd -P)/$branch/src"
	fi

	# New style APKBUILD that has no builddir declaration
	# since the declaration isn't made we have to set builddir
	# ourselves, which conveniently is $srcdir/$pkgname-$pkgver
	[ -z "$builddir" ] && builddir="$srcdir/$pkgname-$pkgver"

	if [ ! -d "$builddir" ]; then
		# Unpack the sources
		run abuild unpack || return $?
	fi

	# Try to move to the directory
	cd "$builddir" || return $?

	# We are already in a git repo, remove it
	[ -d .git ] && rm -rf .git

	# All well, init our repo
	git init . 1>/dev/null && git add . && git commit -m "This Time" 1>/dev/null && {
		printf "Started repo succesfully on %s\n" "$builddir"
	}
}

tmpsh() {
	[ -z "$1" ] && return 1
	cd "$1" || return $?
	sh -l
}

cmd="$1"
_branch="$(git rev-parse --abbrev-ref HEAD)"
if [ -z "$2" ]; then
	branch="$(find_repo "$_branch")"
else
	# Check if the variable provided to us is just the name of
	# a repository. Otherwise try to find the repo given to use
	case "$2" in
		main|community|testing|unmaintained) 
			branch="$(find_repo "$_branch")";;
		*) branch="$(find_repo "$2" && shift || find_repo "$_branch")" ;;
	esac
fi
shift

case "$cmd" in
	u) run abuild unpack && exec "$0" n "$branch";;
	e) edit_apkbuild "$branch";;
	b) run abuild -r;;
	t) run abuild -r;;
	tf) run abuild -f -r;;
	n) f "$branch";;
	x) run abuild checksum;;
	s) git push -uf origin "$(git rev-parse --abbrev-ref HEAD)" "$@";;
	a) git commit --amend -v "$@";;
	m) move_repo "$@";;
	r) rename_repo "$@";;
	w) 
		builddir=
		mkgit "$@" && tmpsh "$builddir"
		;;
	h) help;;
	*) usage;;
esac
