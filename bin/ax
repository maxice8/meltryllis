#!/bin/sh
# shellcheck shell=ash
: "${AX_ABUILD:=abuild}"
: "${AX_ASUM:=abuild}"
: "${APORTSDIR:=$PWD}"


usage() {
	printf "usage: %s <key> [repo/package]\\n" "$(basename "$0")"
}

help() {
usage
	cat <<EOF

keys:
u : unpack
e : edit APKBUILD
t : build the package and install
x : get checksum of package
n : navigate directory
m : move package to a given repo
c : generate diff of package contents
d : generate diff of package depends
p : generate diff of package providers
r : rename a package
w : init a git repo on the unpacked source code
g : get value of variables
f : fix APKBUILD
h : show this message
EOF
}

run() {
	cd "$APORTSDIR"/"$branch"
	$@
	cd - >/dev/null
}

isclean() {
	git diff --quiet --exit-code
}

print_vars() {
	while [ $# -gt 0 ]; do
		printf "%s=%s\n" "$1" "$2"
		shift
		shift
	done
}

find_repo() {
	# Check if the branch name is already a fully working path
	#
	# This allows us to find_repo if we are given the complete name
	# in the form of <repo>/<package> like main/openrc
	if [ -d "$1" ]; then
		printf "%s" "$1"
		return 0
	elif [ -d main/"$1" ]; then
		printf "main/%s" "$1"
		return 0
	elif [ -d community/"$1" ]; then
		printf "community/%s" "$1"
		return 0
	elif [ -d testing/"$1" ]; then
		printf "testing/%s" "$1"
		return 0
	elif [ -d unmaintained/"$1" ]; then
		printf "unmaintained/%s" "$1"
		return 0
	fi

	return 1
}

edit_apkbuild() {
	# Check if the path given to us by $branch results in something
	# This will work in case we are in a branch like 'openrc' or
	# 'main/openrc'
	if [ -n "$1" ] && [ -f "$1"/APKBUILD ]; then
		e "$1"/APKBUILD
		return 0
	# This fallback allows us to edit the APKBUILD if it is in the
	# current directory of a package
	elif [ -f APKBUILD ]; then
		e APKBUILD
		return 0
	fi
	printf "Couldn't find APKBUILD for '%s' to edit\n" "$1"
	return 1
}

move_repo() {
	local from="${2:-$branch}" to="$1" pkgname='' repo=''

	if [ -z "$from" ]; then
		printf "move operation failed: no package to be moved given\n" >&2
		return 1
	fi

	pkgname="$(echo "$from" | cut -d / -f 2)"
	repo="$(echo "$from" | cut -d / -f 1)"

	if [ "$repo" = "$pkgname" ]; then
		if [ -d main/"$from" ]; then
			repo=main
		elif [ -d community/"$from" ]; then
			repo=community
		elif [ -d testing/"$from" ]; then
			repo=testing
		elif [ -d unmaintained/"$from" ]; then
			repo=unmaintained
		else
			printf "move operation failed: package '%s' doesn't exist\n" "$from"
			print_vars from "$from" to "$to"
			return 1
		fi
		from="$repo"/"$pkgname"
	fi

	# Check if the package doesn't exist and error out
	if [ ! -d "$from" ]; then
		printf "move operation failed: package '%s' doesn't exist\n" "$from"
		print_vars from "$from" to "$to"
		return 1
	fi

	# mv if any of the repos given to us is one of the ones we accept
	# exit otherwise with an error message
	case "$to" in
		main|community|testing|unmaintained) git mv -f "$from" "$to" ;;
		*) printf "repo '%s' does not exist\n" "$to" ; return 1 ;;
	esac

	if isclean; then
		NOAPKBUILD_LINT=1 NOAPORTS_LINT=1 NOPKGVERCHECK=1 git commit -m "${to}/${pkgname}: move from $repo"
	fi
}

rename_repo() {
	local src="${2:-$branch}" dst="$1" pkgname='' repo=''

	if [ -z "$src" ]; then
		printf "rename operation failed: no package to be moved given\n" >&2
		return 1
	fi

	# Get repo from the branch
	pkgname="$(echo "$src" | cut -d / -f2)"
	repo="$(echo "$src" | cut -d / -f1)"

	# If they are the same then the package was given to us
	# without a repository, so try to guess it
	if [ "$pkgname" = "$repo" ]; then
		if [ -d main/"$src" ]; then
			repo=main
		elif [ -d community/"$src" ]; then
			repo=community
		elif [ -d testing/"$src" ]; then
			repo=testing
		elif [ -d unmaintained/"$src" ]; then
			repo=unmaintained
		else
			printf "rename operation failed: package '%s' doesn't exist\n" "$dst"
			print_vars from "$src" to "$dst"
			return 1
		fi

		from="$repo"/"$pkgname"
	else
		from="$src"
	fi

	# Check if the package doesn't exist and error out
	if [ ! -d "$from" ]; then
		printf "rename operation failed: package '%s' doesn't exist\n" "$src"
		print_vars from "$from" dst "$dst"
		return 1
	fi

	# Check if the package name is already taken in any repo
	# realrepo is set if the name is taken and the function
	# errors out later
	if [ -d main/"$dst" ]; then
		realrepo=main
	elif [ -d community/"$dst" ]; then
		realrepo=community
	elif [ -d testing/"$dst" ]; then
		realrepo=testing
	elif [ -d unmaintained/"$dst" ]; then
		realrepo=unmaintained
	fi

	if [ "$realrepo" ]; then
		printf "rename operation failed: package '%s' exists in '%s'\n" "$dst" "$realrepo"
		print_vars from "$from" dst "$dst"
		return 1
	fi

	git mv -f "$from" "$repo"/"$dst"

	# Check if there is nothing cached and try to commit it
	if isclean; then
		NOAPKBUILD_LINT=1 NOAPORTS_LINT=1 NOPKGVERCHECK=1 git commit -m "${repo}/${dst}: rename from $pkgname"
	fi
}

source_apkbuild() {
	local apkbuild='' srcdir=''

	# Prefer using the APKBUILD that is on the current directory
	# rather than the one on the branch.
	[ -f "$branch"/APKBUILD ] && apkbuild="$branch"/APKBUILD
	[ -f APKBUILD ] && apkbuild=APKBUILD

	if [ -z "$apkbuild" ]; then
		printf "sourcing apkbuild failed: no APKBUILD found under '%s' and '%s'\n" "$branch" "$(pwd -P)"
		print_vars branch "$branch" curdir "$(pwd -P)"
		return 1
	fi

	# declare this variable as it can appear on builddir
	if [ "$apkbuild" = "APKBUILD" ]; then
		srcdir="$(pwd -P)/src"
	else
		srcdir="$(pwd -P)/$branch/src"
	fi

	# Pass srcdir when sourcing the APKBUILD so the builddir variable
	# is completed
	srcdir="$srcdir" . "$apkbuild" || {
		printf "Failed to source APKBUILD for %s\n" "$branch" >&2
		return 1
	}

	# New style APKBUILD that has no builddir declaration
	# since the declaration isn't made we have to set builddir
	# ourselves, which conveniently is $srcdir/$pkgname-$pkgver
	[ -z "$builddir" ] && builddir="$srcdir/$pkgname-$pkgver"

	export builddir
}

getvar() {
	[ -z "$1" ] && return 1

	source_apkbuild
	for arg; do
		# Get value referenced by the value referenced by the value given to us
		eval echo "\$$arg"
	done
}

tmpsh() {
	[ -z "$1" ] && return 1
	cd "$1" || return $?
	sh -l
}

mkgit() {
	local builddir=''

	source_apkbuild

	# If the sources aren't present then unpack them
	if [ ! -d "$builddir" ]; then
		run $AX_ASUM unpack || return $?
	fi

	# Try to move to the directory
	cd "$builddir" || return $?

	# If we are in aports, return, we have failed to switch.
	if [ "${PWD%*/aports*}" = "$PWD" ]; then
		return 1
	fi

	# All well, init our repo
	git init . 1>/dev/null && git add . && git commit -m "This Time" 1>/dev/null && {
		printf "Started repo succesfully on %s\n" "$builddir"
	}

	tmpsh "$builddir"
}

cd "$APORTSDIR" || {
	printf "APORTSDIR=%s given but couldn't cd to it" "$APORTSDIR" >&2 
	exit 1
}

cmd="$1"
_branch="$(git rev-parse --abbrev-ref HEAD)"

# Deal with branches with alpine stable prefixes
if [ -n "$(alpine-stable-prefix "$_branch")" ]; then
	_branch="$(echo "$_branch" | cut -d - -f2-)"
fi

if [ -z "$2" ]; then
	branch="$(find_repo "$_branch")"
else
	# Check if the variable provided to us is just the name of
	# a repository. Otherwise try to find the repo given to use
	case "$2" in
		main|community|testing|unmaintained)
			branch="$(find_repo "$_branch")";;
		*)
			# Deal with branches with alpine stable prefixes
			if [ -n "$(alpine-stable-prefix "$2")" ]; then
				branch="$(echo "$2" | cut -d - -f2-)"
			fi
			branch="$(find_repo "${branch:-$2}" && shift || find_repo "$_branch")" ;;
	esac
fi
shift

case "$cmd" in
	u)
		source_apkbuild || return $?
		# If the sources aren't present then unpack them
		if [ ! -d "$builddir" ]; then
			run $AX_ASUM unpack || return $?
		fi
		f "$builddir" ;;
	U)
		source_apkbuild || return $?
		# If the sources aren't present then unpack them
		if [ ! -d "$builddir" ]; then
			run $AX_ASUM unpack || return $?
		fi
		tmpsh "$builddir" ;;
	e) edit_apkbuild "$branch";;
	t)
		if [ "$AX_LOG" ]; then
			_mktemp="$(mktemp)"
			run $AX_ABUILD -r | tee $_mktemp
		else
			run $AX_ABUILD -r
		fi
		;;
	tf) if [ "$AX_LOG" ]; then
			_mktemp="$(mktemp)"
			run $AX_ABUILD -f -r | tee $_mktemp
		else
			run "$AX_ABUILD" -f -r
		fi
		;;
	n) f "$branch";;
	N) run sh -l ;;
	x) run abuild checksum;;
	m) move_repo "$@" "$branch";;
	r) rename_repo "$@" "$branch";;
	w) mkgit "$@" "$branch";;
	g) getvar "$@";;
	d) run apkg-diff depends ;;
	p) run apkg-diff provides ;;
	c) run apkg-diff files ;;
	mr)
		git add "$branch" || return 1
		gc || return 1
		gp || return 1
		mkmr
		;;
	f)
		apkbuild-fixer "$branch"/APKBUILD
		;;
	l)
		apkbuild-lint "$branch"/APKBUILD
		aports-lint "$branch"/APKBUILD
		;;
	h) help;;
	*) usage;;
esac
