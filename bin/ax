#!/bin/sh
# shellcheck shell=ash
: "${AX_ABUILD:=abuild}"
: "${AX_ASUM:=abuild}"
: "${APORTSDIR:=$PWD}"


usage() {
	printf "usage: %s <key> [repo/package]\\n" "$(basename "$0")"
}

help() {
usage
	cat <<EOF

keys:
u : unpack
c : generate diff of package contents
d : generate diff of package depends
p : generate diff of package providers
w : init a git repo on the unpacked source code
f : fix APKBUILD
h : show this message
EOF
}

run() {
	cd "$APORTSDIR"/"$branch"
	$@
	cd - >/dev/null
}

print_vars() {
	while [ $# -gt 0 ]; do
		printf "%s=%s\n" "$1" "$2"
		shift
		shift
	done
}

source_apkbuild() {
	local apkbuild='' srcdir=''

	# Prefer using the APKBUILD that is on the current directory
	# rather than the one on the branch.
	[ -f "$branch"/APKBUILD ] && apkbuild="$branch"/APKBUILD
	[ -f APKBUILD ] && apkbuild=APKBUILD

	if [ -z "$apkbuild" ]; then
		printf "sourcing apkbuild failed: no APKBUILD found under '%s' and '%s'\n" "$branch" "$(pwd -P)"
		print_vars branch "$branch" curdir "$(pwd -P)"
		return 1
	fi

	# declare this variable as it can appear on builddir
	if [ "$apkbuild" = "APKBUILD" ]; then
		srcdir="$(pwd -P)/src"
	else
		srcdir="$(pwd -P)/$branch/src"
	fi

	# Pass srcdir when sourcing the APKBUILD so the builddir variable
	# is completed
	srcdir="$srcdir" . "$apkbuild" || {
		printf "Failed to source APKBUILD for %s\n" "$branch" >&2
		return 1
	}

	# New style APKBUILD that has no builddir declaration
	# since the declaration isn't made we have to set builddir
	# ourselves, which conveniently is $srcdir/$pkgname-$pkgver
	[ -z "$builddir" ] && builddir="$srcdir/$pkgname-$pkgver"

	export builddir
}

mkgit() {
	local builddir=''

	source_apkbuild

	# If the sources aren't present then unpack them
	if [ ! -d "$builddir" ]; then
		run $AX_ASUM unpack || return $?
	fi

	# Try to move to the directory
	cd "$builddir" || return $?

	# If we are in aports, return, we have failed to switch.
	if [ "${PWD%*/aports*}" = "$PWD" ]; then
		return 1
	fi

	# All well, init our repo
	git init . 1>/dev/null && git add . && git commit -m "This Time" 1>/dev/null && {
		printf "Started repo succesfully on %s\n" "$builddir"
	}
}

cd "$APORTSDIR" || {
	printf "APORTSDIR=%s given but couldn't cd to it" "$APORTSDIR" >&2 
	exit 1
}

cmd="$1"
_branch="$(git rev-parse --abbrev-ref HEAD)"

# Deal with branches with alpine stable prefixes
if [ -n "$(alpine-stable-prefix "$_branch")" ]; then
	_branch="$(echo "$_branch" | cut -d - -f2-)"
fi

if [ -z "$2" ]; then
	branch="$(find_repo "$_branch")"
else
	# Check if the variable provided to us is just the name of
	# a repository. Otherwise try to find the repo given to use
	case "$2" in
		main|community|testing|unmaintained)
			branch="$(find_repo "$_branch")";;
		*)
			# Deal with branches with alpine stable prefixes
			if [ -n "$(alpine-stable-prefix "$2")" ]; then
				branch="$(echo "$2" | cut -d - -f2-)"
			fi
			branch="$(find_repo "${branch:-$2}" && shift || find_repo "$_branch")" ;;
	esac
fi
shift

case "$cmd" in
	U)
		source_apkbuild || return $?
		# If the sources aren't present then unpack them
		if [ ! -d "$builddir" ]; then
			run $AX_ASUM unpack || return $?
		fi
		cd "$builddir" ;;
	w) mkgit "$@" "$branch";;
	h) help;;
	*) usage;;
esac
