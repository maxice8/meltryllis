#!/usr/bin/python3

from i3ipc import Con, Connection, Event
from i3ipc.aio import Connection as AsyncConnection
from typing import List
from os import environ, path, remove
import sys
import asyncio
import logging

SOCKET = path.join(environ["SESSION_DIR"], "alt-tab-daemon")

if "ALT_TAB_DAEMON_DEBUG" in environ:
    print("Logging everything to stdout")
    logging.basicConfig(level=logging.DEBUG)


def get_ids(container: Con) -> List[int]:
    """
    This function takes a connection to an i3/sway socket and returns
    all the window IDs of the currently focused workspace

    Since sway order changes when focus changes, sort the windows
    """

    list: List[int] = []

    for window in container.workspace():
        list.append(window.id)

    return list


def find_in_list(list: List[int], num) -> int:
    """
    Takes a list of integers and an integer it wants to find and
    returns the first occurrence of the value on the index.
    """
    try:
        return list.index(num)
    except ValueError:
        logging.warning(f"Number {num} not found in List {list}")
        return None
    else:
        logging.warning("Unexpected error:", sys.exc_info()[0])
        return None


def next_prev(list: List[int], index: int, goto: bool) -> int:
    """
    Take a list of integers, an integer representing the index and
    a boolean that tells us to go backwards if true or forwards if false

    If we go backwards then just return the index - 1, Python3 always
    allow us to go backwards as long as the number we subtract is not
    bigger than the length of the list.

    If we go forward, first check if we are at the index of the last value
    of a list, if we are then we just return the first index of the list,
    otherwise we return the index + 1
    """
    logging.debug("List of ids: %s" % list)
    logging.debug("Current index: %s" % index)
    logging.debug("Length of List: %s" % len(list))
    logging.debug("goto value: %s" % goto)
    if not goto:
        if index == 0:
            logging.info("Switching to id: %s" % list[len(list) - 1])
            return list[len(list) - 1]
        else:
            logging.info("Switching to id: %s" % list[index - 1])
            return list[index - 1]
    else:
        if index == len(list) - 1:
            logging.info("Switching to id: %s" % list[0])
            return list[0]
        else:
            logging.info("Switching to id: %s" % list[index + 1])
            return list[index + 1]


def main():
    """
    Make a connection with sway
    """
    connection = Connection(None, True)
    container = None
    ids = None
    index = None

    def refresh(connection):
        nonlocal container, ids, index
        container = connection.get_tree()
        container = container.find_focused()
        ids = get_ids(container)
        ids.sort()
        if len(ids) > 0:
            index = find_in_list(ids, container.id)
            logging.info("ids in container: %s" % ids)
            logging.info("index in container: %s" % index)

    refresh(connection)

    async def refresh_async(connection, _):
        nonlocal container, ids, index
        container = await connection.get_tree()
        container = container.find_focused()
        ids = get_ids(container)
        ids.sort()
        if len(ids) > 0:
            index = find_in_list(ids, container.id)
            logging.info("ids in container: %s" % ids)
            logging.info("index in container: %s" % index)

    async def event_loop():
        try:
            connection = await AsyncConnection(
                socket_path=None, auto_reconnect=True
            ).connect()
        except:
            logging.error(
                "Failed to connect to sway socket on event_loop()", sys.exc_info()[0]
            )
            return 1

        await connection.subscribe([Event.WINDOW])
        """
        These connections are not required as new windows and closed windows
        always take focus, thus triggering a WINDOW_FOCUS event.

        If this situation change in the future just uncomment the 2 lines
        below.

        connection.on(Event.WINDOW_NEW, refresh_async)
        connection.on(Event.WINDOW_CLOSE, refresh_async)
        """
        connection.on(Event.WINDOW_FOCUS, refresh_async)

        """
        This also causes a double trigger of refresh_async, but not in all
        cases.

        This double refresh_async() only happens when you switch to a workspace
        that already has a window. The window will be focused triggering a
        WINDOW_FOCUS event and it will also trigger a WORKSPACE_FOCUS event.

        But if the workspace you focus to is empty it won't trigger a WINDOW_FOCUS
        event and consequently it doesn't refresh the index
        """
        await connection.subscribe([Event.WORKSPACE])
        connection.on(Event.WORKSPACE_FOCUS, refresh_async)

        await connection.main()

    async def read_socket(reader, writer):
        nonlocal ids, index
        """
        If we have only 1 id or even none then there is no reason to continue
        as we cannot switch focus between windows.
        """
        if len(ids) < 2:
            logging.info("Asked for focus change on empty or single window workspace")
            return None

        """
        Read the data given to use via the socket we have and decode it
        """
        data = await reader.read(4)
        message = data.decode()

        """
        If we were given an empty message then just leave with an warning message
        """
        if not message:
            logging.warning("Given empty message on socket")
            return None

        """
        Check if we were given a valid string, we only accept next and prev as strings
        """
        if message == "next":
            message = True
        elif message == "prev":
            message = False
        else:
            logging.warning("Given invalid string, use 'prev' or 'next'")
            return None

        try:
            connection = await AsyncConnection(
                socket_path=None, auto_reconnect=False
            ).connect()
        except:
            logging.error(
                "Failed to connect to sway socket on read_socket()", sys.exc_info()[0]
            )
            return 1

        await connection.command("[con_id=%s] focus" % next_prev(ids, index, message))

        """
        Reload the information after running the command
        await refresh_async(connection, None)

        writer.write(data)
        await writer.drain()
        """

        writer.close()
        await writer.wait_closed()

    loop = asyncio.get_event_loop()

    asyncio.ensure_future(event_loop())
    asyncio.ensure_future(asyncio.start_unix_server(read_socket, SOCKET, loop=loop))

    loop.run_forever()


if __name__ == "__main__":
    if path.exists(SOCKET):
        """
        Remove the SOCKET path
        it is automatically created via asyncio.start_unix_server later
        and the function will fail it the SOCKET exists
        """
        remove(SOCKET)

    main()
