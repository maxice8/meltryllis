#!/usr/bin/env ion
# SPDX-License-Identifier: GPL-3.0-only
# dlbr BRANCH... - Delete local and remote branches matching name
fn delete_remote_branch branch:str
	if not git push --quiet origin --delete $branch ^>/dev/null
		printerr "Failed to delete remote '$branch'"
		return 0
	else
		printok "Deleted remote '$branch'"
	end
end

fn delete_local_branch branch:str
	if not git rev-parse --verify "$branch" &>/dev/null
		return 0
	end

	if test $(git branch --show-current) = $branch
		#
		# Try to switch to the tracking branch
		# otherwise try to switch to the default branch
		#
		let _full = $(tracking-branch $branch)

		if test $_full = $branch
			#
			# We hit this in case we are deleting a branch with the same name
			# as the branch it tracks, like having origin/foo tracking upstream/foo
			# the user wants to delete origin/foo, so we can't switch to 'foo'
			#
			# In this case we default to 'master' for now, this will be solved
			# once we can detect which branch is default (master is overwhelmingly
			# the default right now)
			#
			env PRINTOK_QUIET=yes gbr master
		else
			env PRINTOK_QUIET=yes gbr $_full
		end
	end

	if not git branch -D "$branch" &>/dev/null
		printerr "Failed to delete local '$branch'"
		return 1
	else
		printok "Deleted local '$branch'"
	end
end

test $len(@args) -eq 1 && exit 1
for branch in @args[1..]
	not exists -s DLBR_LOCAL && delete_remote_branch $branch
	delete_local_branch $branch
end
