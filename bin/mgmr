#!/bin/sh
[ -z "$1" ] && exit 1 # We need at least one branch to merge

BINARY="${0##*/}" # The name of the binary, most commonly 'mgmr'

# Strip 'mgmr-' from the binary name, if the binary is called 'mgmr'
# it will just return 'mgmr', for the expected case of it being 'mgmr-<branch-name>'
# it will return '<branch-name>'. The suffix '-stable' is then added
# to the branch name, This is Alpine Linux specific; but might change in the
# future.
#
# After doing all this magic export TARGET_BRANCH to the environment
# so the other utilities we call like checkmr also work
TARGET_BRANCH="${BINARY#mgmr-*}"

if [ "$TARGET_BRANCH" = mgmr ]; then
	TARGET_BRANCH=master
else
	TARGET_BRANCH="$TARGET_BRANCH"-stable
fi
export TARGET_BRANCH

NORMAL="\033[1;0m"
RED="\033[1;31m"

# https://www.etalabs.net/sh_tricks.html
is_empty() (
	cd "$1" || return 1
	set -- .[!.]* ; test -f "$1" && return 1
	set -- ..?* ; test -f "$1" && return 1
	set -- * ; test -f "$1" && return 1
	return 0
)

die() {
	_prompt="${RED}>>> ERROR:${NORMAL}"
	printf "$_prompt %s\n" "$1" >&2
	exit 1
}

if [ "$#" -gt 1 ]; then
	tmpdir=$(mktemp -d -t mgmr.XXXXXX)
	# shellcheck disable=2064
	trap "rm -rf '$tmpdir'" INT EXIT

	branch="$TARGET_BRANCH-$(</dev/urandom tr -dc A-Za-z0-9-_ | dd bs=22 count=1 2>/dev/null)"
	git switch --force-create "$branch" "${TARGET_BRANCH:-master}"

	for mr in "$@"; do
		mr "$mr" || die "Failed to checkout mr !$mr"
		commits="$(gcp | cut -d ' ' -f 1)"

		# Write all commits out into the mr file
		echo "$commits" > "$tmpdir"/"$mr"

		# Sort the MR files and get only the unique results
		# which are the newly added commits from the MR we are
		# working on
		commits="$(sort "$tmpdir"/* | uniq -u)"

		# Write the commits out in a separate step from the sort | uniq -u
		# just in case there is a problem with shell and it ends up overriding
		# it
		printf "%s\\n" "$commits" > "$tmpdir"/"$mr"
	done

	mgbr || die "Failed to merge mrs $*"

	for mr in "$@"; do
		close-mr "$mr" &
		# Read out the mr file for the mr itself, this should contain the commits
		# that were merged
		comment-mr "$mr" 'This was merged as the following commits:

'$(cat "$tmpdir"/"$mr")'

Thanks for your contribution' &
	done
	wait

else
	checkmr "$1" "$TARGET_BRANCH-merge-request" || die "Failed to check out mr !$1"
	commits="$(gcp | cut -d ' ' -f 1)"
	mgbr || die "Failed to merge mr !$1"
	close-mr "$1" &
	comment-mr "$1" 'This was merged as the following commits:

'$commits'

Thanks for your contribution' &
	wait
fi
