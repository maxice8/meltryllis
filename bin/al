#!/usr/bin/ion

#
# Global variables we use extensively in the script
#
# The usage of $or operator allow us to define the default
# as '$or($APORTSDIR $PWD)' is equivalent to ': ${APORTSDIR:-$PWD}'
# from POSIX shells
#
let AX_ABUILD = $or($AX_ABUILD abuild)
let AX_ASUM = $or($AX_ASUM abuild)
let APORTSDIR = $or(APORTSDIR $PWD)

#
# Simple usage that will be shown when the user uses a command in
# the wrong manner or when they call help
#
fn usage
	echo "$basename(@args[0]): <<h|e|b|n|c|mr|d|l|f|u|w|i>|<m> <repository>|<r> <package>> [package]"
end

#
# This is used when the user calls -h this will be shown after showing
# the 'usage'
#
fn show_help
	echo "keys:
 h|help			  : show this help message
 e|edit			  : edit an APKBUILD
 b|build		  : build the package
 n|navigate		  : navigate the directory of the package
 c|checksum		  : regenerate checksum of the package
 mr|merge-request : create merge request for the package
 d|diff			  : diff various attributes of the package
 l|lint			  : run linting tools from atools on the package
 f|fix			  : run tools to automatically fix linting errors in the package
 m|move			  : move a package to another repo
 r|rename		  : rename a package
 u|unpack		  : unpack sources of the package and open the file manager in it
 w|work			  : unpack sources of the package, cd into it and init a git repo
 i|info			  : print information of the package"
end

#
# Strip the alpine linux prefix from the branch, if the branch is 3.11-openldap
# then it will return openldap, if it doesn't have a prefix then do nothing
#
fn strip_al i:str
	let val = $(alpine-stable-prefix $i)
	if exists -s val
		echo @split($i -)[1]
	else
		echo $i
	end
end

#
# This is used before running any command that requires switching to
# the directory of the APKBUILD, almost all commands from abuild require
# the user to switch to it
#
fn run path:str cmd:[str]
	pushd $APORTSDIR/$path &>/dev/null
	@cmd
	popd &>/dev/null
end

#
# Helper function that returns a proper error code if the git tree is
# dirty
#
fn isclean
	git diff --quiet --exit-code
end

#
# Check if we were given any arguments, the first argument is always one
# of the options we match against for specific actions like 'e' to edit
# a package
#
# Argument ordering depends on the specific action called on the 1st argument
# but it will never do operations on more than 1 package at a time
#
# If no package name is given to us then rely in the branch name, if the user
# calls 'ax e' and the branch is called 'poppler' then we assume the user wants
# to edit the poppler package
#
if test $len(@args) -eq 1
	usage
	exit 1
end

#
# Change our directory to APORTSDIR, we want to do all operations relative to
# it, some tools specifically assume we are in it and it is just good to cd into
# it ourselves so people can call this script from anywhere else
#
cd $APORTSDIR

#
# Define path here outside the scope of the next match because we will need to use
# it later, if we don't it define outside the scope it will be lost
#
let path = ""

#
# This is a super-match that will match classes of actions that require the same
# setup actions, like automatically adding a missing argument and checking if the
# package in itself exists
#
match @args[1]
	case [e edit b build n navigate c checksum d diff mr merge-request l lint f fix u unpack w work i info]
		#
		# No package name given to us, rely on the branch name instead
		#
		if test $len(@args) -eq 2
			let args ++= $(git-current-branch)
		end

		#
		# use strip_al to remove the Alpine Linux specific branch name
		# this will remove the stable version number before the package
		# eg: 3.11-openldap returns openldap
		#
		let args[2] = $(strip_al @args[2])
		
		#
		# The usage of find_repo is extremely convenient as it is
		# fast efficient, has good ordering (if there are 2 packages
		# of the same name, the only in the more important repo comes
		# first) and will return nothing if there is no packages instead
		# of needlessly polluting stderr
		#
		# Note that there is also no need to check if APKBUILD itself exists
		# as that is what find_repo does
		#
		let path = $(find_repo @args[2])
		if not exists -s path
			printerr no package named "'@args[2]'"
			exit 1
		end
	case [m move]
		#
		# Check if we were given a repository as our 2nd argument
		#
		if test $len(@args) -eq 2
			printerr Please pass a repository to move the package to
			exit 1
		end

		#
		# No package name given to us, rely on the branch name instead
		#
		if test $len(@args) -eq 3
			let args ++= $(git-current-branch)
		end

		#
		# use strip_al to remove the Alpine Linux specific branch name
		# this will remove the stable version number before the package
		# eg: 3.11-openldap returns openldap
		#
		let args[3] = $(strip_al @args[3])

		#
		# The usage of find_repo is extremely convenient as it is
		# fast efficient, has good ordering (if there are 2 packages
		# of the same name, the only in the more important repo comes
		# first) and will return nothing if there is no packages instead
		# of needlessly polluting stderr
		#
		# Note that there is also no need to check if APKBUILD itself exists
		# as that is what find_repo does
		#
		let path = $(find_repo @args[3])
		if not exists -s path
			printerr no package named "'@args[3]'"
			exit 1
		end

		#
		# Check if the repo we were given exists and if there already exists
		# a package there with the same name
		#
		if not exists -d @args[2]
			printerr no repository named "'@args[2]'"
			exit 1
		end

		if exists -f @args[2]/@args[3]/APKBUILD
			printerr There is already a package called "'@args[3]'" in repository "'@args[2]'"
			exit 1
		end
	case [r rename]
		#
		# Check if we were given a package name as our first argument
		# this package name is the name of the package we will rename
		# the package to
		#
		if test $len(@args) -eq 2
			printerr Please pass a new name for the package
			exit 1
		end

		#
		# No package name given to us, rely on the branch name instead
		# this package name is different from the one above, this one
		# is the name of the package that will be renamed
		#
		if test $len(@args) -eq 3
			let args ++= $(git-current-branch)
		end

		#
		# use strip_al to remove the Alpine Linux specific branch name
		# this will remove the stable version number before the package
		# eg: 3.11-openldap returns openldap
		#
		let args[3] = $(strip_al @args[3])

		#
		# The usage of find_repo is extremely convenient as it is
		# fast efficient, has good ordering (if there are 2 packages
		# of the same name, the only in the more important repo comes
		# first) and will return nothing if there is no packages instead
		# of needlessly polluting stderr
		#
		# Note that there is also no need to check if APKBUILD itself exists
		# as that is what find_repo does
		#
		let path = $(find_repo @args[2])
		if exists -s path
			printerr there is already a package named "'@args[2]'"
			exit 1
		end
end

#
# Match the action, each action requires diferent argument parsing as they have
# different requirements, 'e' (edit an APKBUILD) requires nothing more than a
# package name while stuff like 'm' (move an APKBUILD to another REPOSITORY)
# require a repository to move to and a package name
#
match @args[1]
	case [e edit]
		#
		# Open the APKBUILD in your favourite text editor
		#
		e $path/APKBUILD
	case [b build]
		#
		# Construct an array with all the flags to be passed to abuild
		# this can be manipulated by the user by passing AX_BUILD_ARGS
		#
		let flags = [-r]
		if exists -s AX_ABUILD_ARGS
			let flags ++= @split($AX_ABUILD_ARGS)
		end
		
		#
		# AX_LOG is a variable that can be set so the output of the build
		# process is logged to a temporary file
		#
		if exists -s AX_LOG
			let _mktemp = $(mktemp)
 			run $path [$AX_ABUILD @flags] | tee $_mktemp
		else
			run $path [$AX_ABUILD @flags]
		end
	case [n navigate]
		#
		# Open the file manager in the directory of the package
		#
		f $path
	case [c checksum]
		#
		# run the binary pointed by 'AX_ASUM' and ask it to regenerate the
		# checksum for the package
		#
		run $path [$AX_ASUM checksum]
	case [mr merge-request]
		#
		# Add the files of the package into the git staging and then commit them
		# rely on .githooks to produce a suitable commit message, then use mkmr
		# to create the merge request from the command-line
		#
		git add $path
		if not gc
			printerr Failed to commit changes, the tree is dirty, please fix
			exit 1
		end
 		mkmr -y
	case [d diff]
		#
		# run apkg-diff which will fetch the old packages and diff them
		# againast the new ones
		#
		run $path [apkg-diff size depend provides files] ;;
	case [l lint]
		#
		# Run all linting tools from atools in the APKBUILD
		#
 		run $path [apkbuild-lint APKBUILD]
 		run $path [aports-lint APKBUILD]
 		run $path [secfixes-check APKBUILD]
	case [f fix]
		#
		# Run all linting tools from atools in the APKBUILD
		#
		run $path [apkbuild-fixer APKBUILD]
	case [u unpack]
		#
		# Use $AX_ASUM (the version of abuild that does not run a docker container)
		# to unpack the sources for us
		#
		if not run $path [$AX_ASUM unpack]
			printerr Failed to unpack sources for "'@args[2]'"
			exit 1
		end

		#
		# APKBUILDs are shellscripts and as such we can't source them until source-sh
		# is sorted out (see: https://gitlab.redox-os.org/redox-os/ion/issues/963), until
		# then we can only do the next best thing and try to guess the builddir we should
		# move into
		#
		# Run over all inodes inside the src directory of the package, ignore all ones that
		# are not directory and open the file manager in the first one and then break.
		#
		# This is not as good as having the capability of sourcing the shell to get the
		# builddir= variable, but it is also not complex like writing our own mini parser
		# for dealing with the most common usecases of the builddir= variable.
		#
		# TODO(Leo): revisit this once the above is sorted out
		#
		for inode in $path/src/*
			exists -d $inode || continue
			f $inode
			break
		end
	case [w work]
		#
		# Use $AX_ASUM (the version of abuild that does not run a docker container)
		# to unpack the sources for us
		#
		if not run $path [$AX_ASUM unpack]
			printerr Failed to unpack sources for "'@args[2]'"
			exit 1
		end

		#
		# APKBUILDs are shellscripts and as such we can't source them until source-sh
		# is sorted out (see: https://gitlab.redox-os.org/redox-os/ion/issues/963), until
		# then we can only do the next best thing and try to guess the builddir we should
		# move into
		#
		# Run over all inodes inside the src directory of the package, ignore all ones that
		# are not directory and open the file manager in the first one and then break.
		#
		# This is not as good as having the capability of sourcing the shell to get the
		# builddir= variable, but it is also not complex like writing our own mini parser
		# for dealing with the most common usecases of the builddir= variable.
		#
		# TODO(Leo): revisit this once the above is sorted out
		#
		for inode in $path/src/*
			exists -d $inode || continue
			pushd $inode
			git init >/dev/null
			git add .
			git commit -m 'Start work' >/dev/null
			#
			# Start a temporary shell that allows users to do all the work
			# they need, default to ion if SHELL is not set in the environment
			#
			$or($SHELL ion)
			popd
			break
		end
	case [i info]
		#
		# In the future, iopkg should be rewritten in rust, but it will suffice for
		# now
		#
		run $path [iopkg]
	case [m move]
		#
		# If the directory already exists then move all contents from inside
		# the directory we're moving from to it, otherwise move the directory
		# itself to the new location
		#
		if exists -d @args[2]/@args[3]
			git mv -- $path/* @args[2]/@args[3]
		else
			git mv -- $path @args[2]
		end

		#
		# Use the isclean function to check if we operating in a dirty git tree
		# and if not then we can just push ahead and make a nice commit for the
		# user
		#
		# In this case use the $basename of the $parent of $path, $path is the
		# old path of the package at this point
		#
		if isclean
			env NOAPKBUILD_LINT=1 \
				NOAPORTS_LINT=1 \
				NOPKGVERCHECK=1 \
				git commit -m "@args[2]/@args[3]: move from $basename($parent($path))"
		end
	case [r rename]
		#
		# The usage of find_repo is extremely convenient as it is
		# fast efficient, has good ordering (if there are 2 packages
		# of the same name, the only in the more important repo comes
		# first) and will return nothing if there is no packages instead
		# of needlessly polluting stderr
		#
		# Note that there is also no need to check if APKBUILD itself exists
		# as that is what find_repo does
		#
		let old_path = $(find_repo @args[3])
		if not exists -s old_path
			printerr no package named "'@args[3]'"
			exit 1
		end

		#
		# Get the basename of the parent of the old path, this will give us the
		# repository, path is something like 'main/poppler', so getting the
		# basename of the parent means we get 'main'.
		#
		let repo = $basename($parent($old_path))

		#
		# If the directory already exists then move all contents from inside
		# the directory we're moving from to it, otherwise move the directory
		# itself to the new location
		#
		if exists -d $repo/@args[2]
			git mv -- $old_path/* $repo/@args[2]
		else
			git mv -- $old_path $repo/@args[2]
		end

		#
		# Try being nice to the user and automatically apply sed to change the
		# pkgname= variable from the old name to the new name. But do not mind
		# if it fails for any reason, the user can fix it later and amend the
		# commit
		#
		sed -e "s|^pkgname=.*|pkgname=@args[2]|g" -i $path/APKBUILD

		#
		# Use the isclean function to check if we operating in a dirty git tree
		# and if not then we can just push ahead and make a nice commit for the
		# user
		#
		#
		if isclean
			env NOAPKBUILD_LINT=1 \
				NOAPORTS_LINT=1 \
				NOPKGVERCHECK=1 \
				git commit -m "$repo/@args[2]: rename from @args[3]"
		end
	case _
		usage
		show_help
		exit 1
end

exit 0
