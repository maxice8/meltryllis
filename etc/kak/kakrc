# Delete the whole word, or from the part of the word we are in, until the end
map global normal '<c-w>' 'bd' -docstring 'Vim-style delete whole word'
# Insert variant
map global insert '<c-w>' '<esc>bdi' -docstring 'Vim-style delete whole word'

# Select the whole line
map global normal '<s-v>' 'x' -docstring 'Shift + v to select whole line'

# This is currently broken
map global normal '<c-left>' '<b>' -docstring 'Go back to previous word'
map global normal '<c-right>' '<e>' -docstring 'Go to the next word to next word'

# Keybind to go to start and and end of the line
map global normal '<c-up>' 'gh' -docstring 'Go to the beginning of the line'
map global normal '<c-down>' 'gl' -docstring 'Go to the end of the line'

map global insert '<c-up>' '<esc>ghi' -docstring 'Go to the beginning of the line'
map global insert '<c-down>' '<esc>gli' -docstring 'Go to the end of the line'

# If we press enter in normal mode then we save and quit, this is even faster
# than our :x which is faster than neovim
hook global NormalKey <ret> write!

hook global NormalKey <c-s> write-quit

# If we do ':' then press x then we save-quit, even faster than our previous
# neovim configuration
map global prompt x write-quit<ret>

# Departure from my previous 4
set-option global tabstop 2
set-option global indentwidth 2

# Yank and Paste from world clipboard
map global normal p -docstring 'paste from clipboard' '!paste<ret>'
map global normal y -docstring 'copy to clipboard' '<a-|>copy<ret>'
map global normal d -docstring 'cut to clipboard' '|xsel -bi<ret>'

# Use super quicky-fast ripgrep
set-option global grepcmd 'rg -Hn --no-heading'

# Make search case insensitive
map global normal / /(?i) -docstring 'case insensitive search'

# Custom colorscheme
colorscheme gruvbox

# Source smarttab
source "%val{config}/smarttab.kak"

hook global WinSetOption filetype=sh smarttab

# Define function on APKBUILDs to upgrade the pkgver
hook global BufCreate (.*/)?APKBUILD %{
  define-command -docstring 'quote a variable in APKBUILD' \
  quote -params 1 %{
    evaluate-commands -draft %sh{
      [ -z "$1" ] && return 0
      sed -i "$kak_buffile" \
          -re "s|^$1=([^ ]*)|$1=\"\1\"|g"
    }
    edit!
  }
  define-command -docstring 'unquote a variable in APKBUILD' \
  unquote -params 1 %{
    evaluate-commands -draft %sh{
      [ -z "$1" ] && return 0
      sed -i "$kak_buffile" \
          -re "s|^$1=\"([^\"]*)|$1=\1|g"
    }
    edit!
  }
  define-command -docstring 'yank variable defined in APKBUILD' \
  get -params 1 %{
    evaluate-commands -draft %sh{
      [ -z "$1" ] && return 0
      . $kak_buffile
      eval printf '%s\\n' "\${${1}}" | copy
    }
  }
  define-command -docstring '
up <version>: updates pkgver to <version> and sets pkgrel to 0, the number
can be an absolute version (like 1.0.0) or a relative version prefixed by + (like +1)

If using a relative version then a dot can be prefixed to increase a higher subversion.
If +.1 is passed to a package with version 1.0.0, then the result will be 1.1.0, if +..1
is passed then the version will be 2.0.0

After setting a new version it will call al c to update the checksum, this will lock the
interface until it is done and might take various seconds depending on the size of the
archives in source' \
  up -params 1 %{
    evaluate-commands -draft %sh{
      [ -z "$1" ] && return 0
      . $kak_buffile
      if [ "$(echo "$1" | cut -c 1)" == "+" ]; then
      	result=$(add-to-ver "$(echo $1 | cut -c 2-)" $pkgver)
      else
      	result="$1"
      fi
      sed -i "$kak_buffile" \
      		-e "s|^pkgver=[A-Za-z0-9\._-]*|pkgver=$result|" \
      		-e "s|^pkgrel=[0-9]*|pkgrel=0|"
      al c
    }
    edit!
 }
}
